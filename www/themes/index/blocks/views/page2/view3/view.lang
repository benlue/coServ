<?xml version="1.0" encoding="UTF-8"?>
<phrases>    
	<ph id="title">
		<en>coServ Developer's Guide</en>
		<zh>coServ 開發者手冊</zh>
	</ph>
	<ph id="tagline">
		<en>coServ design aesthetics</en>
		<zh>coServ 的設計美學</zh>
	</ph>
	<ph id="strTime">
		<en>2014-05-27&nbsp;/&nbsp;</en>
		<zh>2014-05-27&nbsp;/&nbsp;</zh>
	</ph>
	<ph id="dspName">
		<en>Author：benlue</en>
		<zh>Author：benlue</zh>
	</ph>
	<ph id="subtitle1">
		<en>Page, Regions and Blocks</en>
		<zh>Page, Regions and Blocks</zh>
	</ph>
	<ph id="section1">
		<en>Page layout is greatly simplified on coServ by breaking a whole page into regions and blocks. A region is like a container, and it can contain sub-regions or blocks. Regions help developers to work on a smaller area at a time.
		</en>
		<zh>網頁、區域和區塊是 coServ 用來解決網頁設計繁複又容易出錯的方法。將一個完整的網頁解構成區域和區塊，讓開發者能專注於較小的面積。 「區域」像是一個容器，可以在裡面放置子區域或是區塊。以 MVC 架構來說，區域只有 view 的部份。
		</zh>
	</ph>
	<ph id="section2">
		<en>A block is a functional unit. By 'functional unit' we mean a block can have business logics associated with it, and a block can interact with users. A typical block would retrieve data from a database and render those retrieved data as HTML.
		</en>
		<zh>「區塊」也是網頁中一個較小的區域，但與區域不同的是區塊還具有 MVC 架構中資料內容（model）與互動控制（control）的部份。 一個典型的區塊可能會從資料庫或檔案、或是COIMOTION API service中讀取資料，然後將結果以 HTML 的格式輸出。
		</zh>
	</ph>
	<ph id="section3">
		<en>The hierarchy is like: page --&lt; regions -&lt; blocks.</en>
		<zh>所以一個網頁可以把它當作有如這樣的結構： page --&lt; regions --&lt; blocks
		</zh>
	</ph>

	<ph id="subtitle2">
		<en>How They Fit Together</en>
		<zh>組合網頁</zh>
	</ph>
	<ph id="section4">
		<en>You can create a page layout which is made of regions. In each region, you can throw in any contents (blocks) as you wish. Assuming you want to make a page for latest news. Below is what you could do on coServ:
		</en>
		<zh>在 coServ 上，網頁是組合起來的，開發者不需要自己用程式去把網頁的每個部分串起來。建議的作法是先建立頁型，把網頁區分成幾個主要的區域。 在每個區域中，再填入所需要的內容（區塊）。這裡舉個例來說明。假設你要建置一個「最新消息」的網頁，網頁的左邊有最新消息的列表，網頁的主文區則是某篇消息的詳細內容。 在 coServ 上，你可以這麼處理：
		</zh>
	</ph>
	<ph id="code1">
		<en>
 +----------------------------------+ 
 | +------------------------------+ |
 | | Head Region                  | | 
 | +------------------------------+ | 
 | +---+  +-----------------------+ |
 | | L |  |                       | |
 | | e |  |                       | | 
 | | f |  |                       | |
 | | t |  |         Main          | |
 | |   |  |                       | | 
 | | R |  |         Region        | | 
 | | e |  |                       | | 
 | | g |  |                       | |
 | | i |  |                       | |
 | | o |  |                       | |
 | | n |  |                       | |
 | +---+  +-----------------------+ | 
 +----------------------------------+ 
     	</en>
		<zh>
 +----------------------------------+ 
 | +------------------------------+ |
 | | Head Region                  | | 
 | +------------------------------+ | 
 | +---+  +-----------------------+ |
 | | L |  |                       | |
 | | e |  |                       | | 
 | | f |  |                       | |
 | | t |  |         Main          | |
 | |   |  |                       | | 
 | | R |  |         Region        | | 
 | | e |  |                       | | 
 | | g |  |                       | |
 | | i |  |                       | |
 | | o |  |                       | |
 | | n |  |                       | |
 | +---+  +-----------------------+ | 
 +----------------------------------+ 
     	</zh>
	</ph>	
	<ph id="section5">
		<en>Assuming you have two blocks: 'news/list' and 'news/view'. The 'news/list' block can retrieve the latest news and display them as a nice-looking list. The 'news/view' block will display a news item. Using the page layout shown above, you can assign the 'news/list' block to the left region and the 'news/view' block to the main region, and you got a page.
		</en>
		<zh>也就是設計一個頁型，把網頁切成三個主要的區域。接著假設你已有二個區塊 'news/list' 和 'news/view'。 'news/list' 區塊會從資料來源（資料庫、COIMOTION）讀取最新消息的清單，並以 HTML 製作成列表的形式。 'news/view' 區塊則能夠將某一則最新消息的詳細內容取出並加以顯示。那麼利用上面展示的頁型，把 'news/list' 區塊放到左邊的區域（left region）， 把 'news/view' 放進主區域（main region）中，你就已產生一個最新消息的頁面了。
		</zh>
	</ph>
	<ph id="section6">
		<en>The good thing is the page layout can be used for other pages as well. You can put a blog list into the left region and the blog view in the main region, and you have a page for blog. Put a product list into the left region and the product view in the main region, and you have a product page. In other words, a page layout can be reused again and agin as long as you see it fit.
		</en>
		<zh>這個模式有趣的地方在於你可以重複利用相同的方法，去產生內容完全不同的網頁，而你完全不需要再去處理網頁編排的問題。 例如你可以將部落格清單放在左區域，部落格本文放在主區域中，你就生成了一個部落格的網頁。把產品清單放在左區域，產品內容說明放在主區域，你又可以生成一個產品網頁。 如此一來你只需專注於方塊內容的產製，而不需為不同的內容一再的去處理網頁版面編排的問題。
		</zh>
	</ph>
	<ph id="section7">
		<en>The 're-use' game can be played on regions and blocks as well. In the following section, we'll show how that can be done.
		</en>
		<zh>這種「重複使用」的模式也可以套用在區域和區塊上，讓你的網站設計工作更進一步的簡化。以下讓我們來說明如何做到這點。
		</zh>
	</ph>

	<ph id="subtitle3">
		<en>Show Me Some Codes</en>
		<zh>來一段程式碼吧</zh>
	</ph>
	<ph id="section8">
		<en>Let's use the demo site bundled in the coServ distribution for example. Look for its default page layout (www/themes/index/layout/default/page.html). This page.html file makes up the skeleton of every page in the demo site. Let's print out the body part of this page:
		</en>
		<zh>讓我們用 coServ 下載套件中所附的範例來說明。先找到位於 'www/themes/index/layout/default/page.html' 的預設頁型檔。 這個頁型檔建構了示範網站中所有網頁的基本框架。我們將預設頁型中有關 body 的部份印出來以方便討論：
		</zh>
	</ph>
	<ph id="section9">
		<en>There are four regions (head, left, main and footer) in a page. The code:
		</en>
		<zh>從上面的 HTML 碼可以看出預設頁型是將網頁切割成四個區域：頁首區（#pgHead）、左邊欄（#pgLeft）、主文區（#pgContent）和頁尾區（#pgFooter）。 而頁首區是這麼實作的：
		</zh>
	</ph>	
	<ph id="section10">
		<en>It means a region with its definition located in the './head' directory (www/themes/index/layout/default/head) will be included. 
		</en>
		<zh>這表示我們不想每個頁面都要重做一次頁首的程式碼（HTML 和 CSS），所以我們是引用 './head' 這個區域。而這個頁首區域的定義是在 './head' 這個目錄中（www/themes/index/layout/default/head）。
		</zh>
	</ph>	
	<ph id="section11">
		<en>Unlike the 'region' example, the above directive does not have any input parameter. If no input is specified, it will be default to the page URL.
		</en>
		<zh>同樣的，區塊也可以用類似的方法引用進來：
		</zh>
	</ph>	

	<ph id="subtitle4">
		<en>Defining Regions And Blocks</en>
		<zh>定義區域和區塊</zh>
	</ph>
	<ph id="section12">
		<en>Regions are no more than a HTML fragment. You can use a HTML file (required) and a CSS file (optional) to define a region. It's quite straight forward so we will explain no more. Just to note that, both files are not really HTML or CSS files. They are templates (using the EJS syntax) so you have more design power when making regions.
		</en>
		<zh>看到這裡可能大家已經慢慢了解在 coServ 上建置網站的工作已被簡化到區域和區塊的建置（定義）。 區域其實就是一個 HTML 的片段，所以你可以用一個 HTML 檔再加上一個 CSS檔 (CSS 不一定需要)來實作出一個區域。 不過這裡要指出的是，這二個檔（HTML, CSS）並不是單純的檔案，而是使用 EJS 語法的樣板。 如此一來，開發者在實作時有更大的空間和彈性。
		</zh>
	</ph>
	<ph id="section13">
		<en>Regions only have views, but blocks have also controllers and models. Therefore, defining a block required a few more files: HTML, CSS, Javascript, a include file and a language resource bundle. You can use up to 5 files to define a block, but in most cases you'd need just 2 or 3 of them.
		</en>
		<zh>以 MVC 的架構來看，區域只有 view 的部份，然而區域卻有 model, view, control 三個完整的結構。也因此在實作區塊時， 會需要更多的設計檔：HTML, CSS, Javascript, 引用檔、以及多語設定套件。有時候你會用到五個檔欄實作一個區塊，不過多數的時候只需其中的二到三個檔案就足夠了。
		</zh>
	</ph>
	<ph id="section14">
		<en>The HTML and CSS templates make up the 'view' of a block while the Javascript template implements the controller of a block. You can use a include file to include CSS and/or Javascript files which are not specified in the page layout (if you have already include CSS/Js files in the page layout, you DON'T have to include them here again). Below is an include file example:
		</en>
		<zh>更進一步解釋這五個檔案：HTML 和 CSS 樣板是用來實作區塊中 view 的部份，而 Javascript 的樣板則是實作了 control 的功能。 至於引用檔是用來引用額外的 CSS 檔案或是 Javascript 程式庫。這些額外引用的 CSS 或 js 檔會被整合到網頁的 &#60;head &#61;中。 以下是引用檔的一個範例：
		</zh>
	</ph>	
	<ph id="section15">
		<en>coServ will wrap the Javascript code to an OO style, and the controller is given a name 'ctrl'. You can treat a block controller very much like a node.js module. Below is an example:
		</en>
		<zh>至於區塊的 Javascript 檔，其實會被 coServ 在外圍做一層包裝，而變成一個物件。此外，這個物件會給予 'ctrl' 的名稱。 在實作區塊的 controller 時，你幾乎可以把它當作 node.js 的模組一般來寫。以下是一個區塊 controller 的範例：			
		</zh>
	</ph>	
	<ph id="section16">
		<en>You can call methods in a block controller from a block view (HTML) as the following:</en>
		<zh>你可以從 HTML 中用以下的方式來呼叫區塊 controller 中的函式：</zh>
	</ph>	
	<ph id="section17">
		<en>More examples can be found in the example sites ('demoApp' and 'index') that come with the package. If you have read the "coServ file structure" page, you'll know where to find them.
		</en>
		<zh>看到這裡你已經對 coServ 的網頁組合語開發模式有相當的認識了。建議大家可以參考下載檔案所附的 'index' 和 'demoApp' 二個示範網站，去找到更多的範例。		
		</zh>
	</ph>

	<ph id="subtitle5">
		<en>More documents</en>
		<zh>更多文件</zh>
	</ph>
	<ph id="list1">
		<en>Preface</en>
		<zh>開箱文</zh>
	</ph>
	<ph id="list2">
		<en>File structure of the site</en>
		<zh>網站的檔案結構</zh>
	</ph>

</phrases>
