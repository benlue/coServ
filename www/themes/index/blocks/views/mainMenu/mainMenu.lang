<?xml version="1.0" encoding="UTF-8"?>
<phrases>
    <ph id="label">
        <en>Language</en>
        <zh>語系選擇</zh>
    </ph>
    <ph id="defaultOption">
        <en>Please choose...</en>
        <zh>請選擇語系...</zh>
    </ph>
    <ph id="menuTitle1">
      <en>Index Page</en>
      <zh>首頁</zh>
    </ph>
    <ph id="menuTitle2">
      <en>Cross Origin</en>
      <zh>整合跨網站資料</zh>
    </ph>
    <ph id="menuTitle3">
      <en>Block Reusing</en>
      <zh>區塊重複使用</zh>
    </ph>
    <ph id="menuTitle4">
      <en>Connecting to BaaS</en>
      <zh>使用 BaaS 服務</zh>
    </ph>
    <ph id="menuTitle5">
      <en>Sass Demo</en>
      <zh>展示 Sass 功能</zh>
    </ph>
    <ph id="menuTitle6">
      <en>Blog</en>
      <zh>部落格</zh>
    </ph>
    <ph id="mc1_1">
      <en>This page is served by a static block. That means contents are neither coming from a local module nor from a API service call.</en>
      <zh>這個範例的主要內容是由一個靜態的區塊所產生，意指內容既不是由程式、資料庫，也不是由所謂的 API 服務所提供，而只是單純的靜態網頁。</zh>
    </ph>
    <ph id="mc1_2">
      <en>The HTML source can be found in &lt;b&gt;blocks/views/index/index.html&lt;/b&gt;</en>
      <zh>實際內容由 &lt;b&gt;blocks/views/index/index.html&lt;/b&gt; 這個檔案產出。</zh>
    </ph>
    <ph id="mc2_1">
      <en>In this example, contents are served by a local module (&lt;b&gt;blocks/modules/co/rss.js&lt;/b&gt;). That module loads a RSS feed from Yahoo, parses it
      and then sends it out as a JSON list for the template engine to compose the HTML output as you see it.</en>
      <zh>這個範例的內容是由一個本地模組 (&lt;b&gt;blocks/modules/co/rss.js&lt;/b&gt;) 所產出。這個模組會讀取 Yahoo 的 RSS 清單後將結果轉成一個 JSON 物件。
      這個 JSON 物件隨後會被送入 coServ 的樣板引擎，然後組合出你目前所看到的 HTML 畫面。</zh>
    </ph>
    <ph id="mc2_2">
      <en>The source file of the local module can be found in &lt;b&gt;blocks/modules/co/rss.js&lt;/b&gt;, and HTML source can be
      found in &lt;b&gt;blocks/views/co/rss/rss.htlml&lt;/b&gt;. There is also a rss.js file in the 'blocks/views/co/rss' directory.
      That js file will run on browsers. Do not confuse it with the rss.js node module.
      </en>
      <zh>Node 模組的原始檔為 &lt;b&gt;blocks/modules/co/rss.js&lt;/b&gt;，至於 HTML 樣板則為 &lt;b&gt;blocks/views/co/rss/rss.htlml&lt;/b&gt;。
      另外還有一個 rss.js 檔位於 'blocks/views/co/rss' 的目錄下。不過這是區塊的控制檔（controller），不要和 node 的模組搞混了。</zh>
    </ph>
    <ph id="mc3_1">
      <en>This example shows how to re-use a block. The RSS block used in the 'Cross Origin' example is used again here, not once but TWICE.
      </en>
      <zh>這個範例展示如何重複使用區塊。在上一個「整合網站資料」的範例中所使用的 RSS 區塊會在此處再度被使用，而且在同一頁面被使用了二次！</zh>
    </ph>
    <ph id="mc3_2">
      <en>Please go checking the &lt;b&gt;/blocks/views/resue/reuse.html&lt;/b&gt; file to see how easily and elegantly this can be done.
      You may even customize its style when reusing a block as shown in this example.
      </en>
      <zh>您可以檢查 &lt;b&gt;/blocks/views/resue/reuse.html&lt;/b&gt; 這個檔，看「區塊重複使用」如何簡易的達成複雜的功能。
        您甚至可以用 CSS 來讓區塊有不同的顯示效果（如範例中所示）。
      </zh>
    </ph>
    <ph id="mc4_1">
      <en>This example shows how to build a typical website without even touching any DB (mySQL, MongoDB or Redis).
      </en>
      <zh>這個範例顯示如何建立一個典型的網站，而完全不需要使用任何資料庫（mySQL, MongoDB 或是 Redis 等）。</zh>
    </ph>
    <ph id="mc4_2">
      <en>To enable this demo, you'll need to have a COIMOTION account. If you already have one, please sign-in.
          Otherwise, please register to get a free account.
      </en>
      <zh>要跑這個範例，您必須要有 COIMOTION 的帳號。如果您已有 COIMOTION 的帳號，請選擇直接登入。否則也可以用範例中所提供的表單申請一個免費帳號，就能啟動這個範例了。</zh>
    </ph>
    <ph id="mc4_3">
      <en>If you apply for a new account, remember to check your mailbox for the activation letter and activate your acccount so the example can proceed.</en>
      <zh>如果您申請帳號，請記得到郵箱中開啟並點選帳號啟動的連結，以便範例能繼續往下執行。</zh>
    </ph>
    <ph id="mc6_1">
      <en>Original</en>
      <zh>Original 樣式</zh>
    </ph>
    <ph id="mc6_2">
      <en>Light Blue</en>
      <zh>Light Blue 樣式</zh>
    </ph>
</phrases>
